<?php
/**
 * Fluent_Options_Demo
 *
 * @package Fluent
 * @since 1.0.0
 * @version 1.0.0
 */

/**
 * Fluent_Options_Demo This is a base class used to create a demo of the Fluent Framework. This shouldn't be used in production.
 *
 * @since 1.0.0
 * @version 1.0.0
 */
class Fluent_Options_Demo{
    
    /**
     * @var string $domain Class text domain.
     */
    public $domain = 'fluent';
    
    /**
     * @var array $sections array passed to the Fluent_Options class for the demo.
     */
    public $sections = array();
    
    /**
      * __construct() sets up the args, sections and fires the Fluent_Options framework.
      *
      * @since 1.0.0
      *
      * @return none
      *
      */
    public function __construct(){
        $this->setup_args();
        $this->setup_general_fields();
        $this->setup_choice_fields();
        $this->setup_advanced_fields();
        $this->setup_group_fields();
        $this->setup_export_fields();
        
        //load normal options page
        $this->panel = new Fluent_Options_Page( $this->args, $this->sections );
        
        //load meta boxes
        $this->meta = new Fluent_Options_Meta( $this->args, $this->sections );
        
        //load user meta
        $sections = $this->sections;
        unset($sections['group']);
        $this->user_meta = new Fluent_Options_User( $this->args, $sections );
        
        //load taxonomy meta
        $this->args['taxonomies'] = array('category');
        $sections = $this->sections;
        unset($sections['group']);
        $this->tax_meta = new Fluent_Options_Taxonomy( $this->args, $sections );
        
        //load shortcodes - 1.1.0
        //$this->shortcodes = new Fluent_Shortcodes;

    }
    
    /**
      * Create args for use in the Fluent_Options class.
      *
      * @since 1.0.0
      *
      * @return none
      */
    private function setup_args(){
        $this->args = array(
            'dev_mode' => true
        );
    }
    
    /**
      * Adds the basic text fields to the sections array.
      *
      * @since 1.0.0
      *
      * @return none
      */
    private function setup_general_fields(){
        $this->sections['text'] = array(
            'dash_icon' => 'list-view',
            'title' =>  __('Text Fields', $this->domain),
            'description' => __('These are the basic text field types found in the options framework',$this->domain),
            'context' => 'normal',
            'priority' => 'high',
            'fields' => array(
                'text' => array(
                    'type' => 'text',
                    'title' => __('Text Field', $this->domain),
                    'sub_title' => __('This is a sub title', $this->domain),
                    'required' => true,
                    'description' => __('This is just a text field.', $this->domain),
                    'default' => ''
                ),
                'text-regular' => array(
                    'type' => 'text',
                    'title' => __('Text Field', $this->domain),
                    'sub_title' => __('With Custom CSS Class', $this->domain),
                    'classes' => array('regular-text'),
                    'description' => __('This text field has the <code>regular-text</code> class applied.', $this->domain),
                ),
                'text-small' => array(
                    'type' => 'text',
                    'title' => __('Text Field', $this->domain),
                    'sub_title' => __('With Custom CSS Class', $this->domain),
                    'classes' => array('small-text'),
                    'description' => __('This text field has the <code>small-text</code> class applied.', $this->domain),
                ),
                'email' => array(
                    'type' => 'email',
                    'title' => __('Email Field', $this->domain),
                    'sub_title' => __('HTML5 email field', $this->domain),
                    'description' => __('This text field has the <code>type="email"</code> input attribute.', $this->domain),
                ),
                'url' => array(
                    'type' => 'url',
                    'title' => __('Url Field', $this->domain),
                    'sub_title' => __('HTML5 url field', $this->domain),
                    'description' => __('This text field has the <code>type="url"</code> input attribute.', $this->domain),
                ),
                'number' => array(
                    'type' => 'number',
                    'title' => __('Number Field', $this->domain),
                    'sub_title' => __('HTML5 Number Input', $this->domain),
                    'min' => 5,
                    'max' => 50,
                    'step' => 5,
                    'description' => __('This is a simple HTML5 number field.', $this->domain),
                ),
                'password' => array(
                    'type' => 'password',
                    'title' => __('Password Field', $this->domain),
                    'sub_title' => __('This is a password field', $this->domain),
                    'required' => true,
                    'required_message' => __('Hey this is a custom required message!', $this->domain),
                    'description' => __('The value will be saved as plain text.', $this->domain),
                ),
                'textarea' => array(
                    'type' => 'textarea',
                    'title' => __('Textarea Field', $this->domain),
                    'sub_title' => __('Multiline inputs', $this->domain),
                    'required' => true,
                    'cols' => 60, //default
                    'rows' => 6, //default
                    'description' => __('This is just a textarea field.', $this->domain),
                ),
            ),
        );  
    }
    
    /**
      * Adds the basic choice fields to the sections array.
      *
      * @since 1.0.0
      *
      * @return none
      */
    private function setup_choice_fields(){
        $this->sections['choice'] = array(
            'dash_icon' => 'share',
            'title' =>  __('Choice Fields', $this->domain),
            'description' => __('These are the basic HTML choice field types found in the options framework (radio, checkbox, select)',$this->domain),
            'context' => 'normal',
            'priority' => 'high',
            'fields' => array(
                'radio' => array(
                    'type' => 'radio',
                    'title' => __('Radio Field', $this->domain),
                    'sub_title' => __('Choose a single answer', $this->domain),
                    'description' => __('This is a very basic yes/no field type, but it can have many more options.', $this->domain),
                    'options' => array(
                        'yes' => __('Yes', $this->domain),
                        'no' => __('No', $this->domain)
                    ),
                    'default' => 'yes'
                ),
                'radio2' => array(
                    'type' => 'radio',
                    'title' => __('Radio Field', $this->domain),
                    'sub_title' => __('Block level radio inputs', $this->domain),
                    'description' => __('This is a very basic yes/no field type, but it can have many more options.', $this->domain),
                    'options' => array(
                        'yes' => __('Yes', $this->domain),
                        'no' => __('No', $this->domain)
                    ),
                    'default' => 'no',
                    'inline' => false//force block level options
                ),
                'checkbox' => array(
                    'type' => 'checkbox',
                    'title' => __('Checkbox Field', $this->domain),
                    'sub_title' => __('Choose a single answer', $this->domain),
                    'description' => __('This is a very basic checkbox field type, it can have a single or multiple checkboxes.', $this->domain),
                    'options' => array(
                        'yes' => __('Yes', $this->domain),
                        'no' => __('No', $this->domain)
                    ),
                    'default' => array('yes' => true)
                ),
                'checkbox2' => array(
                    'type' => 'checkbox',
                    'title' => __('Checkbox Field', $this->domain),
                    'sub_title' => __('Block level radio inputs', $this->domain),
                    'description' => __('This is a very basic checkbox field type, it can have a single or multiple checkboxes.', $this->domain),
                    'options' => array(
                        'yes' => __('Yes', $this->domain),
                        'no' => __('No', $this->domain)
                    ),
                    'required' => true,
                    'inline' => false//force block level options
                ),
                'checkbox3' => array(
                    'type' => 'checkbox',
                    'title' => __('Checkbox Field', $this->domain),
                    'sub_title' => __('Single Checkbox', $this->domain),
                    'description' => __('This is a very basic checkbox field type, it can have a single or multiple checkboxes.', $this->domain),
                    'required' => true,
                    'options' => array(
                        'agree' => __('I Agree to terms of service', $this->domain)
                    ),
                    'default' => true
                ),
                'select' => array(
                    'type' => 'select',
                    'title' => __('Select Field', $this->domain),
                    'sub_title' => __('Simple Select Field', $this->domain),
                    'description' => __('This is a very basic select field type.', $this->domain),
                    'options' => array(
                        'yes' => __('Yes', $this->domain),
                        'no' => __('No', $this->domain)
                    ),
                    'placeholder' => __('Please choose ..', $this->domain),
                    'default' => 'no'
                ),
                'select2' => array(
                    'type' => 'select',
                    'title' => __('Select Field', $this->domain),
                    'sub_title' => __('Multiple Select Field', $this->domain),
                    'description' => __('This is a very basic select field type with multiple options selectable.', $this->domain),
                    'options' => array(
                        'yes' => __('Yes', $this->domain),
                        'maybe' => __('Maybe', $this->domain),
                        'no' => __('No', $this->domain)
                    ),
                    'multiple' => true,
                    'default' => array(0 => 'yes',1 => 'no')
                ),
            ),
        );
    }
    
    /**
      * Adds some advanced fields to the sections array.
      *
      * @since 1.0.0
      *
      * @return none
      */
    private function setup_advanced_fields(){
        $this->sections['advanced'] = array(
            'dash_icon' => 'dashboard',
            'title' =>  __('Advanced Fields', $this->domain),
            'description' => __('These are the advanced field types found in the options framework',$this->domain),
            'context' => 'normal',
            'priority' => 'high',
            'fields' => array(
                'editor' => array(
                    'type' => 'editor',
                    'title' => __('Editor Field', $this->domain),
                    'sub_title' => __('This is a sub title', $this->domain),
                    'required' => true,
                    'description' => __('This is just a default WordPress editor field.', $this->domain),
                ),
                'color' => array(
                    'type' => 'color',
                    'title' => __('Color Field', $this->domain),
                    'sub_title' => __('This is a sub title', $this->domain),
                    'required' => true,
                    'description' => __('This is just a default WordPress color picker field.', $this->domain),
                    'default' => '#000000'
                ),
                'date' => array(
                    'type' => 'date',
                    'title' => __('Date Field', $this->domain),
                    'sub_title' => __('This is a sub title', $this->domain),
                    'required' => true,
                    'description' => __('This is just a default jQuery UI datepicker field.', $this->domain),
                    'default' => date(get_option('date_format'))
                ),
                'media' => array(
                    'type' => 'media',
                    'title' => __('Media Field', $this->domain),
                    'required' => true,
                    'sub_title' => __('This is a sub title', $this->domain),
                    'description' => __('This opens up and allows you to select media items from the library.', $this->domain)
                ),
                'media2' => array(
                    'type' => 'media',
                    'title' => __('Media Field', $this->domain),
                    'sub_title' => __('With Custom Text parts', $this->domain),
                    'upload_title' => __('Hey custom upload button text!', $this->domain),
                    'media_title' => __('Hey a custom title!', $this->domain),
                    'media_select' => __('Hey a custom select button!', $this->domain),
                    'description' => __('This opens up and allows you to select media items from the library.', $this->domain)
                ),
                'gallery' => array(
                    'type' => 'gallery',
                    'title' => __('Gallery Field', $this->domain),
                    'sub_title' => __('This is a sub title', $this->domain),
                    'required' => true,
                    'description' => __('This opens up and allows you to create galleries from the library.', $this->domain)
                ),
                'switch' => array(
                    'type' => 'switch',
                    'title' => __('Switch Field', $this->domain),
                    'sub_title' => __('This is a sub title', $this->domain),
                    'description' => __('This opens up and allows you to create galleries from the library.', $this->domain)
                ),
                'custom' => array(
                    'type' => 'custom',
                    'title' => __('Custom Field', $this->domain),
                    'sub_title' => __('This is a sub title', $this->domain),
                    'required' => true,
                    'description' => __('Cool custom field.', $this->domain),
                    'callbacks' => array(
                        'render' => function($data, $object){print_r($data);},
                        'default' => function($default, $data){return 'a default value';},
                        'enqueue' => function($data, $field_data){},
                        'schema' => function($value, $data){}
                    ),
                ),
            ),
        );  
    }
    
    /**
      * Adds export and import fields to the sections array.
      *
      * @since 1.0.0
      *
      * @return none
      */
    private function setup_export_fields(){
        $this->sections['info'] = array(
            'dash_icon' => 'editor-help',
            'title' =>  __('Info Fields', $this->domain),
            'description' => __('These are the information field types found in the options framework',$this->domain),
            'context' => 'normal',
            'priority' => 'high',
            'fields' => array(
                'info' => array(
                    'type' => 'info',
                    'icon' => 'dashboard',
                    'title' => __('Info Field', $this->domain),
                    'description' => __('This is a information field.', $this->domain)
                ),
                'info-notice' => array(
                    'type' => 'info',
                    'icon' => 'chart-line',
                    'info_type' => 'notice',
                    'show_title' => false,
                    'title' => __('Info Field', $this->domain),
                    'description' => __('This is a information field with notice class applied and no title.', $this->domain)
                ),
                'info-warning' => array(
                    'type' => 'info',
                    'info_type' => 'warning',
                    'title' => __('Info Field', $this->domain),
                    'description' => __('This is a information field with warning class applied and no icon.', $this->domain)
                ),
                'info-error' => array(
                    'type' => 'info',
                    'icon' => 'awards',
                    'info_type' => 'error',
                    'title' => __('Info Field', $this->domain),
                    'description' => __('This is a information field with error class applied.', $this->domain)
                ),
                'info-success' => array(
                    'type' => 'info',
                    'icon' => 'location-alt',
                    'info_type' => 'success',
                    'title' => __('Info Field', $this->domain),
                    'sub_title' => __('This is a sub title', $this->domain),
                    'description' => __('This is a information field with success class applied.', $this->domain)
                ),
            ),
        );  
    }
    
    
    /**
      * Adds the group fields to the sections array.
      *
      * @since 1.0.0
      *
      * @return none
      */
    private function setup_group_fields(){
        
        $this->sections['group'] = array(
            'dash_icon' => 'feedback',
            'title' => __('Group Fields', $this->domain),
            'description' => __('Group Fields are one of the most important features of this framework. Groups allow to create nested, repeatable, sortable sub fields. You are simply limited by your imagination (and physical screensize, after 2 levels you run out of alot of space).',$this->domain),
            'context' => 'advanced',
            'priority' => 'high',
            'fields' => array(
                'group' => array(
                    'title' => 'Group Field',
                    'sub_title' => '',
                    'description' => '',
                    'multiple' => true,
                    'type' => 'group',
                    'fields' => array(
                        'title' => array(
                            'title' => 'title',
                            'width' => '15'
                        ),
                        'first_name' => array(
                            'title' => 'first name',
                            'width' => '75'
                        ),
                        'adult' => array(
                            'title' => 'adult',
                            'type' => 'checkbox',
                            'options' => array(
                                'adult' => '',
                            ),
                            'width' => '10'
                        ),
                    ),
                    'default' => array(
                        array(
                            'title' => 'mr',
                            'first_name' => 'lee',
                            'adult' => true,
                        ),
                    ),
                ),
                'group2' => array(
                    'title' => 'Group Field 2',
                    'sub_title' => '',
                    'description' => '',
                    'multiple' => true,
                    'type' => 'group',
                    'fields' => array(
                        'title' => array(
                            'title' => 'title',
                            'width' => '15',
                        ),
                        'names' => array(
                            'title' => 'names',
                            'width' => '85',
                            'type' => 'group',
                            'fields' => array(
                                'first' => array(
                                    'title' => 'firstname',
                                ),
                                'last' => array(
                                    'title' => 'lastname',
                                ),
                            ),
                        ),
                    ),
                ),
                'group3' => array(
                    'title' => 'Group Field 3',
                    'type' => 'group',
                    'show_headers' => false,
                    'fields' => array(
                        'title' => array(
                            'title' => 'title',
                            'default' => 'mr'
                        ),
                        'first' => array(
                            'title' => 'firstname',
                            'default' => 'lee'
                        ),
                        'last' => array(
                            'title' => 'lastname',
                            'default' => 'mason'
                        ),
                    ),
                ),
                'group4' => array(
                    'title' => 'Group Field 4',
                    'multiple' => true,
                    'type' => 'group',
                    'fields' => array(
                        'title' => array(
                            'title' => 'title',
                        ),
                        'names' => array(
                            'title' => 'names',
                            'type' => 'group',
                            'multiple' => true,
                            'fields' => array(
                                'first' => array(
                                    'title' => 'firstname',
                                ),
                                'last' => array(
                                    'title' => 'lastname',
                                ),
                            ),
                        ),
                    ),
                ),
                'group5' => array(
                    'title' => 'Group Field 5',
                    'multiple' => true,
                    'type' => 'group',
                    'fields' => array(
                        'title' => array(
                            'title' => 'title',
                        ),
                        'names' => array(
                            'title' => 'names',
                            'type' => 'group',
                            'multiple' => true,
                            'fields' => array(
                                'first' => array(
                                    'title' => 'firstname',
                                    'type' => 'group',
                                    'multiple' => true,
                                    'fields' => array(
                                        'title' => array(
                                            'title' => 'title',
                                        ),
                                    ),
                                ),
                                'last' => array(
                                    'title' => 'lastname',
                                ),
                            ),
                        ),
                    ),
                ),
                'group6' => array(
                    'title' => 'Group Field 6',
                    'type' => 'group',
                    'show_headers' => true,
                    'multiple' => true,
                    'fields' => array(
                        'date' => array(
                            'type' => 'date',
                            'title' => 'Date',
                            'default' => date(get_option('date_format'))
                        ),
                        'switch' => array(
                            'type' => 'switch',
                            'title' => 'Switch',
                        ),
                        'color' => array(
                            'type' => 'color',
                            'title' => 'Color'
                        ),
                    ),
                ),
            )
        );
    } 
    
}
